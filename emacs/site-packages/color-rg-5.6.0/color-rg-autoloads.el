;;; color-rg-autoloads.el --- automatically extracted autoloads
;;
;;; Code:


;;;### (autoloads nil "color-rg" "color-rg.el" (0 0 0 0))
;;; Generated autoloads from color-rg.el

(autoload 'color-rg-mode "color-rg" "\


\(fn)" t nil)

(autoload 'color-rg-customized-search "color-rg" "\
Rerun rg with customized arguments. This function will give
user more freedom to use rg with special arguments." t nil)

(autoload 'color-rg-switch-to-view-mode "color-rg" nil t nil)

(autoload 'color-rg-search-input "color-rg" "\


\(fn &optional KEYWORD DIRECTORY GLOBS)" t nil)

(autoload 'color-rg-search-symbol "color-rg" nil t nil)

(autoload 'color-rg-search-symbol-with-type "color-rg" nil t nil)

(autoload 'color-rg-search-input-in-current-file "color-rg" nil t nil)

(autoload 'color-rg-search-symbol-in-current-file "color-rg" nil t nil)

(autoload 'color-rg-search-project "color-rg" nil t nil)

(autoload 'color-rg-search-symbol-in-project "color-rg" nil t nil)

(autoload 'color-rg-search-project-with-type "color-rg" nil t nil)

(autoload 'color-rg-search-project-rails "color-rg" nil t nil)

(autoload 'color-rg-search-project-rails-with-type "color-rg" nil t nil)

(autoload 'color-rg-replace-all-matches "color-rg" nil t nil)

(autoload 'color-rg-filter-match-results "color-rg" nil t nil)

(autoload 'color-rg-filter-mismatch-results "color-rg" nil t nil)

(autoload 'color-rg-filter-match-files "color-rg" nil t nil)

(autoload 'color-rg-filter-mismatch-files "color-rg" nil t nil)

(autoload 'color-rg-unfilter "color-rg" nil t nil)

(autoload 'color-rg-remove-line-from-results "color-rg" nil t nil)

(autoload 'color-rg-recompile "color-rg" "\
Run `recompile' while preserving some buffer local variables." t nil)

(autoload 'color-rg-rerun "color-rg" "\
Run `color-rg-recompile' with `compilation-arguments' taken
from `color-rg-cur-search'." t nil)

(autoload 'color-rg-rerun-regexp "color-rg" "\
Re-search as regexp.

\(fn &optional KEYWORD)" t nil)

(autoload 'color-rg-rerun-change-globs "color-rg" "\
Rerun last search but prompt for new files." t nil)

(autoload 'color-rg-rerun-change-exclude-files "color-rg" "\
Rerun last search but prompt for new files which will NOT be searched.
This function is the opposite of `color-rg-rerun-change-globs'" t nil)

(autoload 'color-rg-rerun-change-dir "color-rg" "\
rerun last command but prompt for new dir." t nil)

(autoload 'color-rg-rerun-literal "color-rg" "\
Re-search as literal.

\(fn &optional NOINTERACTIVE)" t nil)

(autoload 'color-rg-rerun-toggle-case "color-rg" "\
Rerun last search with toggled case sensitivity setting." t nil)

(autoload 'color-rg-rerun-toggle-ignore "color-rg" "\
Rerun last search with toggled '--no-ignore' flag." t nil)

(autoload 'isearch-toggle-color-rg "color-rg" "\
toggle `color-rg' in isearch-mode." t nil)

(autoload 'color-rg-jump-next-keyword "color-rg" nil t nil)

(autoload 'color-rg-jump-prev-keyword "color-rg" nil t nil)

(autoload 'color-rg-jump-next-file "color-rg" nil t nil)

(autoload 'color-rg-jump-prev-file "color-rg" nil t nil)

(autoload 'color-rg-insert-current-line "color-rg" nil t nil)

(autoload 'color-rg-open-file "color-rg" "\


\(fn &optional STAY)" t nil)

(autoload 'color-rg-open-file-and-stay "color-rg" nil t nil)

(autoload 'color-rg-switch-to-edit-mode "color-rg" nil t nil)

(autoload 'color-rg-quit "color-rg" nil t nil)

(autoload 'color-rg-beginning-of-line "color-rg" nil t nil)

(autoload 'color-rg-delete-line "color-rg" nil t nil)

(autoload 'color-rg-delete-all-lines "color-rg" nil t nil)

(autoload 'color-rg-recover-line "color-rg" nil t nil)

(autoload 'color-rg-recover-buffer "color-rg" nil t nil)

(autoload 'color-rg-apply-changed "color-rg" nil t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "color-rg" '("color-rg-")))

;;;***

(provide 'color-rg-autoloads)
;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; color-rg-autoloads.el ends here
