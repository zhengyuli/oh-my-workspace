;;; package --- dired-custom-extension.el -*- lexical-binding:t -*-
;; Time-stamp: <2022-03-17 11:13:40 Thursday by zhengyuli>

;; Copyright (C) 2021, 2022 zhengyu li
;;
;; Author: zhengyu li <lizhengyu419@outlook.com>
;; Version: 0.0.1
;; Keywords: none

;; This file is not part of GNU Emacs.

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;

;; Put this file into your load-path and the following into your ~/.emacs:
;;   (require 'dired-custom-extension)

;;; Require:
(require 'files)
(require 'simple)
(require 'dired)
(require 'dired-single)
(require 'dired-subtree)
(require 'dired-hacks-utils)

;;; Code:
;; ==================================================================================
(defun dired-goto-first-line ()
  "Dired go to the first line."
  (interactive)
  (dired-revert)
  (beginning-of-buffer)
  (dired-hacks-next-file))

(defun dired-goto-last-line ()
  "Dired go to the first line."
  (interactive)
  (dired-revert)
  (end-of-buffer)
  (dired-hacks-previous-file))

(defun dired-up-directory-single ()
  "Return up directory in single window."
  (interactive)
  (let ((dir (dired-current-directory)))
    (dired-single-buffer "..")
    (dired-goto-file dir)))

(defun dired-backup-file ()
  "Backup file in current directory."
  (interactive)
  (let* ((origin-files (dired-get-marked-files)))
    (dolist (origin-file origin-files)
      (condition-case nil
          (if (file-directory-p origin-file)
              (copy-directory origin-file (concat origin-file ".back") 1)
            (copy-file origin-file (concat origin-file ".back") 1))
        (error nil)))
    (dired-revert)))

(defun dired-get-size ()
  "Get total size of marked files."
  (interactive)
  (let ((files (dired-get-marked-files)))
    (with-temp-buffer
      (apply 'call-process "/usr/bin/du" nil t nil "-sch" files)
      (message "Size of all marked files: %s"
               (progn
                 (re-search-backward "^\\s-*\\([0-9.,]+[A-Za-z]+\\).*\\(total\\|总用量\\)$")
                 (match-string 1))))))

(defun dired-get-file-name (with-full-path only-path)
  "Dired get file name.
If `WITH-FULL-PATH' is nil and `ONLY-PATH' is nil, return only file name,
If `WITH-FULL-PATH' is t and `ONLY-PATH' is nil, return full file path,
If `WITH-FULL-PATH' is nil and `ONLY-PATH' is t, return only file path,
If `WITH-FULL-PATH' is t and `ONLY-PATH' is t, return only file path."
  (let ((clipboard))
    (if only-path
        (if (equal 'windows-nt system-type)
            (setq clipboard (dired-replace-in-string "/" "\\" (dired-current-directory)))
          (setq clipboard (dired-current-directory)))
      (let ((file (dired-get-file-for-visit)))
        (if with-full-path
            (progn
              (if (file-directory-p file)
                  (setq file (concat file "/")))
              (if(equal 'windows-nt system-type)
                  (setq clipboard (dired-replace-in-string "/" "\\" file))
                (setq clipboard file)))
          (if (file-directory-p file)
              (setq clipboard (file-name-nondirectory file))
            (setq clipboard (file-name-nondirectory file))))))

    (kill-new clipboard)
    (message "copy string \"%s\" to clipboard" clipboard)))

(defun dired-get-file-name-with-path ()
  "Dired get file name with path."
  (interactive)
  (dired-get-file-name t nil))

(defun dired-get-file-name-without-path ()
  "Dired get file name without path."
  (interactive)
  (dired-get-file-name nil nil))

(defun dired-get-file-name-only-path ()
  "Dired get file name only path."
  (interactive)
  (dired-get-file-name t t))

(defun dired-custom-sort ()
  "Show directories first in dired mode."
  (save-excursion
    (let (buffer-read-only)
      (forward-line 2)
      (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max))))
  (set-buffer-modified-p nil))

;; ==================================================================================
;;; Provide features
(provide 'dired-custom-extension)

;;; dired-custom-extension.el ends here
