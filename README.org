* Oh My Workspace Configurations
This guide includes all kinds of configurations of daily used tools on mac.

** Command Line Tools
The Command Line Tool package gives Mac terminal users many commonly used tools, utilities, compilers, and many other
useful commands that are usually found in default Linux installations.

*** Installation
Use xcode-select to download and install:

#+BEGIN_SRC shell
  xcode-select --install
#+END_SRC

** Homebrew
*[[https://brew.sh/][Homebrew]]* the most popular package manager on mac.

*** Installation
1. Install homebrew:

#+BEGIN_SRC shell
  /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
#+END_SRC

2. Add */usr/local/bin* to the $PATH:

#+BEGIN_SRC shell
  echo 'export PATH="/usr/local/bin:$PATH"' >> ~/.zshrc
#+END_SRC

3. Self-check and update brew:

#+BEGIN_SRC shell
  brew doctor && brew update
#+END_SRC

** iTerm2
*[[https://www.iterm2.com/][iTerm2]]* is a replacement for Terminal and the successor to iTerm. It brings the terminal into the modern age with
features you never knew you always wanted.

*** Installation
Use homebrew to download and install:

#+BEGIN_SRC shell
  brew cask install iterm2
#+END_SRC

*** Configure
**** Fonts
1.  Install Source Code Pro font from: https://fonts.google.com/specimen/Source+Code+Pro

2. Install Source Serif Pro font from: https://fonts.google.com/specimen/Source+Serif+Pro

3. Select the **Source Code Pro** font through *iTerm2->Preferences->Profiles->Text->Font*.

**** Theme
1. Download Dracula theme for iTerm2:

#+BEGIN_SRC shell
  git clone https://github.com/dracula/iterm.git
#+END_SRC

2. Import theme through *iTerm2->Preferences->Profiles->Colors->Color Presets->Import*.

3. Select **Dracula** theme through *iTerm2->Preferences->Profiles->Colors->Color Presets->Dracula*.

**** Key Bindings
Configure shortcuts through *iTerm2->Preferences->Keys->Key Mappings* panel.

| Action       | Key Mapping |
|--------------+-------------|
| Previous Tab | ⇧⌘P         |
| Next Tab     | ⇧⌘N         |

** Zsh + Oh My Zsh
*[[http://zsh.sourceforge.net/][Z shell]]* (also known as zsh) is a Unix shell that is built on top of bash (the default shell for macOS).

*[[https://ohmyz.sh/][Oh My Zsh]]* is an open source, community-driven framework for managing your zsh configuration. It comes with a bunch of
features out of the box and improves your terminal experience.

*** Installation
1. Use homebrew to download and install:

#+BEGIN_SRC shell
  brew install zsh
#+END_SRC

2. Install Oh My Zsh:

#+BEGIN_SRC shell
  sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
  chsh -s $(which zsh)
#+END_SRC

*** Configure
The out-of-the-box configuration is usable but you probably want to customise it to suit your needs.

The Official [[https://github.com/ohmyzsh/ohmyzsh/wiki)][Wiki]] contains a lot of useful information if you want to deep dive into what you can do with Oh My Zsh, but
we'll cover the basics here.

*** Themes
Changing theme is as simple as changing a string in your configuration file.

#+BEGIN_EXAMPLE
# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="agnoster"
#+END_EXAMPLE

**** Plugins
Standard plugins can be found in *~/.oh-my-zsh/plugins/**, custom plugins may be added to *~/.oh-my-zsh/custom/plugins/*.

1. Download custom plugins:

#+BEGIN_SRC shell
  brew install fzf

  git clone https://github.com/zsh-users/zsh-autosuggestions.git ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
  brew install autosuggestions

  git clone https://github.com/zsh-users/zsh-syntax-highlighting ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
#+END_SRC

2. Configure daily used plugins in your _~/.zshrc_:

#+BEGIN_EXAMPLE
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#a9a9a9"

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    history
    fzf
    autojump
    zsh-autosuggestions
    zsh-syntax-highlighting
    brew
    git
    docker
    web-search
)
#+END_EXAMPLE

**** Others
Append the following settings to your configuration file.

#+BEGIN_EXAMPLE
# Disable homebrew auto update
export HOMEBREW_NO_AUTO_UPDATE="true"
#+END_EXAMPLE

** GnuPG
GnuPG is a complete and free implementation of the OpenPGP standard as defined by RFC4880 (also known as PGP). GnuPG
allows you to encrypt and sign your data and communications; it features a versatile key management system, along with
access modules for all kinds of public key directories. GnuPG, also known as GPG, is a command line tool with features
for easy integration with other applications. A wealth of frontend applications and libraries are available. GnuPG also
provides support for S/MIME and Secure Shell (ssh).

*** Installation
Use homebrew to download and install:

#+BEGIN_SRC shell
  brew install gnupg
#+END_SRC

*** Configure
 Generate a new gpg key by:

#+BEGIN_SRC shell
  gpg --full-generate-key
#+END_SRC

** Pass
Password management should be simple and follow Unix philosophy. With pass, each password lives inside of a gpg
encrypted file whose filename is the title of the website or resource that requires the password. These encrypted files
may be organized into meaningful folder hierarchies, copied from computer to computer, and, in general, manipulated
using standard command line file management utilities.

*** Installation
Use homebrew to download and install:

#+BEGIN_SRC shell
  brew install pass
#+END_SRC

*** Configure
Select a gpg key to initialize pass:

#+BEGIN_SRC shell
  gpg --list-keys
  pass init "selected gpg id"
#+END_SRC

** ChatGPT
ChatGPT is a pre-trained language model based on the Generative Pre-trained Transformer (GPT) architecture that is
fine-tuned for conversational tasks such as chatbot interactions.

*** Configure

#+BEGIN_SRC shell
  # Configure GPT API token
  pass insert openai.com/apikey
#+END_SRC

** EMail
isync is a command line application which synchronizes mail boxes; currently Maildir and IMAP4 mailboxes are
supported. New messages, message deletions and flag changes can be propagated both ways. isync is suitable for use in
IMAP-disconnected mode.

*** Installation
Use homebrew to download and install:

#+BEGIN_SRC shell
  brew install isync
  brew install mu
#+END_SRC

*** Configure
1. Copy the following configure to your _~/.mbsyncrc_

#+BEGIN_EXAMPLE
# Define the IMAP4 Account name, opening a section for its parameters.
IMAPAccount outlook
Host imap-mail.outlook.com
User lizhengyu419@outlook.com
PassCmd "pass mbsync/outlook"
SSLType IMAPS
SSLVersion TLSv1.2
AuthMechs LOGIN
CertificateFile /usr/local/etc/ca-certificates/cert.pem
Timeout 120
PipelineDepth 50

# Define the IMAP4 Store name, opening a section for its parameters.
IMAPStore outlook-remote
Account outlook

# Define the Maildir Store name, opening a section for its parameters.
MaildirStore outlook-local
Path ~/.mail/outlook/
Inbox ~/.mail/outlook/Inbox
SubFolders Verbatim

# Define the Channel name, opening a section for its parameters.
Channel outlook
Far :outlook-remote:
Near :outlook-local:
Patterns *
Sync All
Create Near
Expunge None
SyncState *
#+END_EXAMPLE

2. Copy the following configure to your _~/.gnupg/gpg-agent.conf_

#+BEGIN_EXAMPLE
allow-emacs-pinentry
default-cache-ttl 3600
max-cache-ttl 7200
#+END_EXAMPLE

3. Reload gpg-agent

#+BEGIN_SRC shell
  gpgconf --reload gpg-agent
#+END_SRC

4. Synchronize email and initialize mu index

#+BEGIN_SRC shell
  # Generate password for your imap email account
  pass insert mbsync/outlook

  # Generate password for your smtp email account
  pass insert smtp-mail.outlook.com/lizhengyu419@outlook.com

  # Synchronize email with remote
  mkdir -p ~/.mail/outlook
  mbsync -a

  # Initialize mu index
  mu init -m ~/.mail/outlook --my-address=lizhengyu419@outlook.com
  mu index
#+END_SRC

** LLVM
The LLVM Project is a collection of modular and reusable compiler and toolchain technologies.

*** Installation
Use homebrew to download and install:

#+BEGIN_SRC shell
  brew install llvm
#+END_SRC

*** Configure
Append the following settings to your _~/.zshrc_:

#+BEGIN_SRC shell
  echo 'export PATH="$(brew --prefix llvm)/bin:$PATH"' >> ~/.zshrc
#+END_SRC

** Golang
Go is an open source programming language.

*** Installation
Download the latest version from [[https://golang.org/dl/][Golang Site]] and install manually.

*** Configure
Create Golang projects workspace:

#+BEGIN_SRC shell
  mkdir -p $HOME/MyGoProjects
#+END_SRC

Append the following settings to your _~/.zshrc_:

#+BEGIN_EXAMPLE
# Path to your go projects
export GOPATH=$HOME/MyGoProjects

# Update $PATH
export PATH=$GOPATH/bin:$PATH
#+END_EXAMPLE

Install golang related dependencies:

#+BEGIN_SRC shell
  go install golang.org/x/tools/cmd/godoc@latest
  go install github.com/rogpeppe/godef@latest
  go install github.com/nsf/gocode@latest
#+END_SRC

** Rust
Rust is an open source language empowering everyone to build reliable and efficient software.

*** Installation
Download the latest rustup from [[w3m:https://www.rust-lang.org/tools/install][Rust Site]] and install manually.

*** Configure
Install rust related dependencies:

#+BEGIN_SRC shell
  # Install rust analyzer
  brew install rust-analyzer

  # Install rust source code
  rustup component add rust-src
#+END_SRC

** Pyenv
pyenv is a very popular python management tool. It lets you easily switch between multiple versions of Python.

*** Installation
Use homebrew to download and install:

#+BEGIN_SRC shell
  # Install pyenv
  brew install pyenv

  # Install your prefered python version
  pyenv install 3.9.1
#+END_SRC

*** Configure
Append the following settings to your _~/.zshrc_:

#+BEGIN_EXAMPLE
# Initialize pyenv
eval "$(pyenv init --path)"
eval "$(pyenv init -)"
#+END_EXAMPLE

** pyenv-virtualenvwrapper

*** Installation
Using git to download and install:

#+BEGIN_SRC shell
  git clone https://github.com/pyenv/pyenv-virtualenvwrapper.git $(pyenv root)/plugins/pyenv-virtualenvwrapper
#+END_SRC

*** Configure
Append the following settings to your _~/.zshrc_:

#+BEGIN_EXAMPLE
# To get virtualenvwrapper to create a virtual environment using
# pyvenv instead of virtualenv.
export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV="true"

# Activate shell python
pyenv shell 3.9.1

# Activate virtualenvwrapper
pyenv virtualenvwrapper
#+END_EXAMPLE

** Python
MacOS, like Linux, ships with Python already installed.

For not messing with the system Python (some system tools rely on it, etc.), we need install our own version(s).

*** Installation
Using pyenv to download and install:

#+BEGIN_SRC shell
  pyenv install 3.9.1
  pyenv global 3.9.1
  pyenv rehash
#+END_SRC

** Emacs
Emacs is an extensible, customizable, free/libre text editor — and more.

*** Installation
1. Using homebrew to download and install:

#+BEGIN_SRC shell
  brew tap railwaycat/emacsmacport
  brew cask install emacs-mac
  brew untap railwaycat/emacsmacport
#+END_SRC

2. Installing emacs related dependencies:

#+BEGIN_SRC shell
  # Dependencies for emacs ag
  brew install ag

  # Dependencies for flyspell
  brew install aspell

  # Dependencies for emacs c&c++ lsp mode and dap mode
  # Please make sure **clangd** and **lldb-vscode** have been installed
  # Mac platform:
  brew install llvm
  # Ubuntu platform:
  sudo apt-get install clang clang-tools

  # Dependencies for emacs python lsp mode and dap mode
  pip install "python-lsp-server[all]"
  pip install "ptvsd>=4.2"

  # Dependencies for emacs golang mode
  go install github.com/rogpeppe/godef@latest
  go install golang.org/x/tools/cmd/gorename@latest
  go install golang.org/x/tools/cmd/guru@latest

  # Dependencies for emacs markdown
  brew install markdown
  brew install pandoc
  go install github.com/shurcooL/markdownfmt@latest

  # Dependencies for emacs plantuml
  brew install plantuml
#+END_SRC

*** Configure
1. Setup emacs configurations:

#+BEGIN_SRC shell
  ./emacs/install.sh
#+END_SRC
